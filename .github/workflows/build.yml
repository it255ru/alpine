name: Build and Verify Custom Alpine

on:
  schedule:
    - cron: '0 6 * * *'
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  # Используем личный namespace вместо организационного
  IMAGE_NAME: ${{ github.repository_owner }}/alpine-custom

jobs:
  build-and-verify:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write  # Явно указываем права на запись пакетов

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Determine latest Alpine version
      id: version
      run: |
        ALPINE_VERSION=$(curl -s https://dl-cdn.alpinelinux.org/alpine/latest-stable/releases/x86_64/ | \
          grep -oE 'alpine-minirootfs-[0-9]+\.[0-9]+\.[0-9]+-x86_64.tar.gz' | \
          sort -V | tail -n1 | sed 's/alpine-minirootfs-\(.*\)-x86_64.tar.gz/\1/')
        echo "ALPINE_VERSION=$ALPINE_VERSION" >> $GITHUB_OUTPUT

    - name: Download and verify minirootfs
      run: |
        wget -O alpine-rootfs.tar.gz \
          "https://dl-cdn.alpinelinux.org/alpine/latest-stable/releases/x86_64/alpine-minirootfs-${{ steps.version.outputs.ALPINE_VERSION }}-x86_64.tar.gz"
        tar -tzf alpine-rootfs.tar.gz >/dev/null || exit 1

    - name: Update Dockerfile with latest version
      run: |
        sed -i "s/alpine-minirootfs-[0-9]*\.[0-9]*\.[0-9]*-x86_64\.tar\.gz/alpine-minirootfs-${{ steps.version.outputs.ALPINE_VERSION }}-x86_64.tar.gz/" Dockerfile

    - name: Build Docker image
      run: |
        docker build -t custom-alpine:${{ steps.version.outputs.ALPINE_VERSION }} .
        docker tag custom-alpine:${{ steps.version.outputs.ALPINE_VERSION }} custom-alpine:latest

    - name: Scan for CVE with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'custom-alpine:${{ steps.version.outputs.ALPINE_VERSION }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-${{ steps.version.outputs.ALPINE_VERSION }}
        path: trivy-results.sarif
      if: always()

    - name: Login to GitHub Container Registry
      if: success()
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Push to GHCR
      if: success()
      run: |
        docker tag custom-alpine:${{ steps.version.outputs.ALPINE_VERSION }} \
          ghcr.io/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.ALPINE_VERSION }}
        docker tag custom-alpine:latest ghcr.io/${{ env.IMAGE_NAME }}:latest
        
        docker push ghcr.io/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.ALPINE_VERSION }}
        docker push ghcr.io/${{ env.IMAGE_NAME }}:latest
