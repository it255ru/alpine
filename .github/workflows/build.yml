name: Build and Verify Custom Alpine

on:
  schedule:
    - cron: '0 6 * * *'  # Ежедневно в 06:00 UTC
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-verify:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      packages: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Determine latest Alpine version
      id: version
      run: |
        ALPINE_VERSION=$(curl -s https://dl-cdn.alpinelinux.org/alpine/latest-stable/releases/x86_64/ | \
          grep -oE 'alpine-minirootfs-[0-9]+\.[0-9]+\.[0-9]+-x86_64.tar.gz' | \
          sort -V | tail -n1 | sed 's/alpine-minirootfs-\(.*\)-x86_64.tar.gz/\1/')
        echo "ALPINE_VERSION=$ALPINE_VERSION" >> $GITHUB_OUTPUT

    - name: Download and verify minirootfs
      run: |
        wget "https://dl-cdn.alpinelinux.org/alpine/latest-stable/releases/x86_64/alpine-minirootfs-${{ steps.version.outputs.ALPINE_VERSION }}-x86_64.tar.gz" -O alpine-rootfs.tar.gz
        tar -tzf alpine-rootfs.tar.gz >/dev/null || exit 1
        echo "Rootfs downloaded and verified"

    - name: Build Docker image
      id: build
      run: |
        docker build --build-arg ALPINE_VERSION=${{ steps.version.outputs.ALPINE_VERSION }} -t custom-alpine:${{ steps.version.outputs.ALPINE_VERSION }} .
        echo "Image built successfully"

    - name: Analyze image layers
      id: layers
      run: |
        # Создаем отчет о слоях
        echo "## 🗂️ Image Layers Analysis" > layers-report.md
        echo "**Image:** custom-alpine:${{ steps.version.outputs.ALPINE_VERSION }}" >> layers-report.md
        echo "**Total Size:** $(docker images custom-alpine:${{ steps.version.outputs.ALPINE_VERSION }} --format "{{.Size}}")" >> layers-report.md
        echo "" >> layers-report.md
        echo "### Layer Structure:" >> layers-report.md
        echo "" >> layers-report.md
        
        # Получаем информацию о слоях
        echo "- [ ] **custom-alpine:${{ steps.version.outputs.ALPINE_VERSION }}**" >> layers-report.md
        
        # Получаем историю слоев в обратном порядке (от самого старого к новому)
        LAYER_NUM=1
        docker history --no-trunc --format "{{.Size}}\t{{.CreatedBy}}" custom-alpine:${{ steps.version.outputs.ALPINE_VERSION }} | tail -n +2 | tac | while IFS=$'\t' read -r size command; do
          # Очищаем команду
          CLEAN_COMMAND=$(echo "$command" | sed 's/^[ \t]*//;s/[ \t]*$//')
          echo "  - [ ] \`$CLEAN_COMMAND\` $size" >> layers-report.md
          ((LAYER_NUM++))
        done
        
        echo "" >> layers-report.md
        echo "### Layer Size Summary:" >> layers-report.md
        echo "" >> layers-report.md
        
        # Суммируем размеры по типам операций
        docker history --format "{{.Size}}\t{{.CreatedBy}}" custom-alpine:${{ steps.version.outputs.ALPINE_VERSION }} | \
          tail -n +2 | awk -F'\t' '
          {
            size = $1;
            cmd = $2;
            if (cmd ~ /^ADD/) add_size += size;
            else if (cmd ~ /^RUN/) run_size += size;
            else if (cmd ~ /^COPY/) copy_size += size;
            else other_size += size;
          }
          END {
            if (add_size != "0B") printf "- **ADD operations**: %s\n", add_size;
            if (run_size != "0B") printf "- **RUN operations**: %s\n", run_size;
            if (copy_size != "0B") printf "- **COPY operations**: %s\n", copy_size;
            if (other_size != "0B") printf "- **Other operations**: %s\n", other_size;
          }' >> layers-report.md
        
        # Общее количество слоев
        TOTAL_LAYERS=$(docker history --format "{{.ID}}" custom-alpine:${{ steps.version.outputs.ALPINE_VERSION }} | wc -l)
        echo "- **Total Layers**: $((TOTAL_LAYERS-1))" >> layers-report.md

    - name: Scan for CVE with Trivy
      id: trivy-scan
      continue-on-error: true
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'custom-alpine:${{ steps.version.outputs.ALPINE_VERSION }}'
        format: 'table'
        output: 'trivy-results.txt'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: Generate SBOM with Syft
      id: sbom
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
        syft custom-alpine:${{ steps.version.outputs.ALPINE_VERSION }} -o spdx-json > sbom-spdx.json
        syft custom-alpine:${{ steps.version.outputs.ALPINE_VERSION }} -o table > sbom-packages.txt
        echo "SBOM generated successfully"

    - name: Extract package details
      id: packages
      run: |
        syft custom-alpine:${{ steps.version.outputs.ALPINE_VERSION }} -o json > sbom-detailed.json
        
        echo "## 📦 Package Inventory Report" > package-report.md
        echo "**Alpine Version:** ${{ steps.version.outputs.ALPINE_VERSION }}" >> package-report.md
        echo "**Generated:** $(date -u)" >> package-report.md
        echo "" >> package-report.md
        echo "### Installed Packages:" >> package-report.md
        echo "" >> package-report.md
        echo "| Package | Version | License | Type |" >> package-report.md
        echo "|---------|---------|---------|------|" >> package-report.md
        
        jq -r '.artifacts[] | 
          .name as $name |
          .version as $version |
          .type as $type |
          (.licenses | if type == "array" then map(.value? // .) | join(", ") 
                      elif type == "string" then . 
                      else "Unknown" end) as $license |
          "| \($name) | \($version) | \($license) | \($type) |"' sbom-detailed.json >> package-report.md
        
        PACKAGE_COUNT=$(jq '.artifacts | length' sbom-detailed.json)
        echo "" >> package-report.md
        echo "**Total packages:** $PACKAGE_COUNT" >> package-report.md
        
        echo "" >> package-report.md
        echo "### 📊 License Distribution:" >> package-report.md
        echo "" >> package-report.md
        
        jq -r '.artifacts[].licenses | 
          if type == "array" then 
            if length > 0 then 
              .[] | .value? // . 
            else 
              "Unknown" 
            end 
          elif type == "string" then 
            . 
          else 
            "Unknown" 
          end' sbom-detailed.json | grep -v '^null$' | sort | uniq -c | sort -nr > licenses.tmp
        
        if [ -s licenses.tmp ]; then
          while read count license; do
            echo "- **$license**: $count packages" >> package-report.md
          done < licenses.tmp
        else
          echo "- No license information available" >> package-report.md
        fi
        
        echo "" >> package-report.md
        echo "### 🔧 Package Types:" >> package-report.md
        echo "" >> package-report.md
        jq -r '.artifacts[].type' sbom-detailed.json | sort | uniq -c | sort -nr | \
          while read count type; do
            echo "- **$type**: $count packages" >> package-report.md
          done
        
        rm -f licenses.tmp
        echo "Package report generated successfully"

    - name: Save Docker image as tar archive
      run: |
        docker save custom-alpine:${{ steps.version.outputs.ALPINE_VERSION }} | gzip > alpine-image-${{ steps.version.outputs.ALPINE_VERSION }}.tar.gz

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: alpine-build-${{ steps.version.outputs.ALPINE_VERSION }}
        path: |
          alpine-rootfs.tar.gz
          alpine-image-${{ steps.version.outputs.ALPINE_VERSION }}.tar.gz
          trivy-results.txt
          sbom-spdx.json
          sbom-packages.txt
          sbom-detailed.json
          package-report.md
          layers-report.md
          docker-history.txt
          docker-inspect.json
        retention-days: 30

    - name: Create Success Issue
      if: steps.trivy-scan.outcome == 'success'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let report = 'No vulnerabilities found';
          let packageReport = 'No package report available';
          let layersReport = 'No layers report available';
          
          try {
            report = fs.readFileSync('trivy-results.txt', 'utf8');
          } catch (e) {
            report = 'Scan completed successfully - no vulnerabilities found';
          }
          
          try {
            packageReport = fs.readFileSync('package-report.md', 'utf8');
          } catch (e) {
            packageReport = 'Package report generation failed';
          }
          
          try {
            layersReport = fs.readFileSync('layers-report.md', 'utf8');
          } catch (e) {
            layersReport = 'Layers analysis failed';
          }
          
          const issueBody = `# Alpine Build Report ✅
          
          **Version:** ${{ steps.version.outputs.ALPINE_VERSION }}
          **Status:** SUCCESS
          **Build Date:** ${new Date().toISOString()}
          
          ## Security Scan Results
          No critical or high vulnerabilities found.
          
          \`\`\`
          ${report}
          \`\`\`
          
          ## Image Structure
          ${layersReport}
          
          ## SBOM & Package Analysis
          ${packageReport}
          
          ## Artifacts
          - RootFS Archive: \`alpine-rootfs.tar.gz\`
          - Docker Image: \`alpine-image-${{ steps.version.outputs.ALPINE_VERSION }}.tar.gz\`
          - Security Report: \`trivy-results.txt\`
          - SBOM (SPDX): \`sbom-spdx.json\`
          - Package Details: \`sbom-detailed.json\`
          - Package Inventory: \`package-report.md\`
          - Layer Analysis: \`layers-report.md\`
          
          All artifacts are available in GitHub Actions artifacts.`;
          
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `✅ Alpine Build Success - ${{ steps.version.outputs.ALPINE_VERSION }}`,
            body: issueBody,
            labels: ['build-success', 'security-pass']
          });
          
          await github.rest.issues.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issue.data.number,
            state: 'closed'
          });

    - name: Create Failure Issue
      if: steps.trivy-scan.outcome == 'failure'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let report = 'No detailed report available';
          let packageReport = 'No package report available';
          let layersReport = 'No layers report available';
          
          try {
            report = fs.readFileSync('trivy-results.txt', 'utf8');
          } catch (e) {
            // Ignore error, use default message
          }
          
          try {
            packageReport = fs.readFileSync('package-report.md', 'utf8');
          } catch (e) {
            packageReport = 'Package report generation failed';
          }
          
          try {
            layersReport = fs.readFileSync('layers-report.md', 'utf8');
          } catch (e) {
            layersReport = 'Layers analysis failed';
          }
          
          const issueBody = `# Alpine Build Report ❌
          
          **Version:** ${{ steps.version.outputs.ALPINE_VERSION }}
          **Status:** FAILED - Vulnerabilities found
          **Build Date:** ${new Date().toISOString()}
          
          ## Security Scan Results
          Critical or High vulnerabilities detected. Manual review required.
          
          \`\`\`
          ${report}
          \`\`\`
          
          ## Image Structure
          ${layersReport}
          
          ## SBOM & Package Analysis
          ${packageReport}
          
          ## Next Steps
          1. Review the vulnerabilities above
          2. Check artifacts for detailed reports
          3. Consider updating packages or dependencies
          4. Analyze license compliance
          5. Review image layer structure
          
          ## Artifacts
          - RootFS Archive: \`alpine-rootfs.tar.gz\`
          - Docker Image: \`alpine-image-${{ steps.version.outputs.ALPINE_VERSION }}.tar.gz\`
          - Security Report: \`trivy-results.txt\`
          - SBOM (SPDX): \`sbom-spdx.json\`
          - Package Details: \`sbom-detailed.json\`
          - Package Inventory: \`package-report.md\`
          - Layer Analysis: \`layers-report.md\``;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `❌ Alpine Build Failed - ${{ steps.version.outputs.ALPINE_VERSION }}`,
            body: issueBody,
            labels: ['build-failed', 'security-issues', 'requires-review']
          });
