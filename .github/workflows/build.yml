name: Build and Verify Custom Alpine

on:
  schedule:
    - cron: '0 6 * * *'  # Ежедневно в 06:00 UTC
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-verify:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      packages: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Determine latest Alpine version
      id: version
      run: |
        ALPINE_VERSION=$(curl -s https://dl-cdn.alpinelinux.org/alpine/latest-stable/releases/x86_64/ | \
          grep -oE 'alpine-minirootfs-[0-9]+\.[0-9]+\.[0-9]+-x86_64.tar.gz' | \
          sort -V | tail -n1 | sed 's/alpine-minirootfs-\(.*\)-x86_64.tar.gz/\1/')
        echo "ALPINE_VERSION=$ALPINE_VERSION" >> $GITHUB_OUTPUT

    - name: Download and verify minirootfs
      run: |
        wget "https://dl-cdn.alpinelinux.org/alpine/latest-stable/releases/x86_64/alpine-minirootfs-${{ steps.version.outputs.ALPINE_VERSION }}-x86_64.tar.gz" -O alpine-rootfs.tar.gz
        tar -tzf alpine-rootfs.tar.gz >/dev/null || exit 1
        echo "Rootfs downloaded and verified"

    - name: Build Docker image
      id: build
      run: |
        docker build --build-arg ALPINE_VERSION=${{ steps.version.outputs.ALPINE_VERSION }} -t custom-alpine:${{ steps.version.outputs.ALPINE_VERSION }} .
        echo "Image built successfully"

    - name: Scan for CVE with Trivy
      id: trivy-scan
      continue-on-error: true
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'custom-alpine:${{ steps.version.outputs.ALPINE_VERSION }}'
        format: 'table'
        output: 'trivy-results.txt'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: Generate SBOM with Syft
      id: sbom
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
        syft custom-alpine:${{ steps.version.outputs.ALPINE_VERSION }} -o spdx-json > sbom-spdx.json
        syft custom-alpine:${{ steps.version.outputs.ALPINE_VERSION }} -o table > sbom-packages.txt
        echo "SBOM generated successfully"

    - name: Extract package details
      id: packages
      run: |
        syft custom-alpine:${{ steps.version.outputs.ALPINE_VERSION }} -o json > sbom-detailed.json
        
        echo "## 📦 Package Inventory Report" > package-report.md
        echo "**Alpine Version:** ${{ steps.version.outputs.ALPINE_VERSION }}" >> package-report.md
        echo "**Generated:** $(date -u)" >> package-report.md
        echo "" >> package-report.md
        echo "### Installed Packages:" >> package-report.md
        echo "" >> package-report.md
        echo "| Package | Version | License |" >> package-report.md
        echo "|---------|---------|---------|" >> package-report.md
        
        jq -r '.artifacts[] | 
          .name as $name |
          .version as $version |
          (.licenses | if type == "array" then map(.value? // .) | join(", ") 
                      elif type == "string" then . 
                      else "Unknown" end) as $license |
          "| \($name) | \($version) | \($license) |"' sbom-detailed.json >> package-report.md
        
        PACKAGE_COUNT=$(jq '.artifacts | length' sbom-detailed.json)
        echo "" >> package-report.md
        echo "**Total packages:** $PACKAGE_COUNT" >> package-report.md
        
        echo "Package report generated successfully"

    - name: Analyze image layers
      id: layers
      run: |
        echo "## 🗂️ Image Layers Analysis" > layers-report.md
        echo "**Image:** custom-alpine:${{ steps.version.outputs.ALPINE_VERSION }}" >> layers-report.md
        echo "**Total Size:** $(docker images custom-alpine:${{ steps.version.outputs.ALPINE_VERSION }} --format "{{.Size}}")" >> layers-report.md
        echo "" >> layers-report.md
        echo "### Build Process:" >> layers-report.md
        echo "" >> layers-report.md
        echo "| # | Type | Command | Size | Impact |" >> layers-report.md
        echo "|---|------|---------|------|--------|" >> layers-report.md
        
        # Получаем сырой вывод и парсим вручную
        docker history --no-trunc custom-alpine:${{ steps.version.outputs.ALPINE_VERSION }} | tail -n +2 | sed 's/  / /g' > /tmp/docker_raw.txt
        
        LAYER_NUM=1
        tac /tmp/docker_raw.txt | while IFS= read -r line; do
          # Извлекаем размер (последнее числовое поле перед командой)
          SIZE=$(echo "$line" | grep -o '[0-9.]\+[KMG]B' | head -1)
          if [ -z "$SIZE" ]; then
            SIZE="0B"
          fi
          
          # Извлекаем команду (все после даты/времени)
          COMMAND=$(echo "$line" | sed 's/.*ago[ ]*//' | sed 's/[ ]*[0-9.]\+[KMG]B.*//')
          
          # Очищаем команду
          CLEAN_COMMAND=$(echo "$COMMAND" | sed 's/# buildkit//g' | sed 's/|.* ALPINE_VERSION=[^ ]* //g' | sed 's/^[ \t]*//;s/[ \t]*$//')
          
          # Сокращаем только если команда длиннее 40 символов
          if [ ${#CLEAN_COMMAND} -gt 40 ]; then
            SHORT_COMMAND="${CLEAN_COMMAND:0:40}..."
          else
            SHORT_COMMAND="$CLEAN_COMMAND"
          fi
          
          # Определяем тип и влияние
          LAYER_TYPE=""
          IMPACT=""
          
          if [[ "$COMMAND" == ARG* ]]; then
            LAYER_TYPE="Build Arg"
            IMPACT="⚙️ Build-time"
          elif [[ "$COMMAND" == LABEL* ]]; then
            LAYER_TYPE="Metadata"
            IMPACT="📝 Info only"
          elif [[ "$COMMAND" == ADD*rootfs* ]]; then
            LAYER_TYPE="Base Image"
            IMPACT="🏗️ Foundation"
          elif [[ "$COMMAND" == RUN*apk*add* && "$SIZE" != "0B" ]]; then
            LAYER_TYPE="Packages"
            IMPACT="📦 Adds packages"
          elif [[ "$COMMAND" == RUN*echo*repos* ]]; then
            LAYER_TYPE="Config"
            IMPACT="⚙️ Setup"
          elif [[ "$COMMAND" == RUN*timezone* ]]; then
            LAYER_TYPE="Config"
            IMPACT="🌍 Localization"
          elif [[ "$COMMAND" == RUN*ln* ]]; then
            LAYER_TYPE="Symlinks"
            IMPACT="🔗 Symlinks"
          elif [[ "$COMMAND" == VOLUME* ]]; then
            LAYER_TYPE="Volume"
            IMPACT="💾 Storage"
          elif [[ "$COMMAND" == CMD* ]]; then
            LAYER_TYPE="Command"
            IMPACT="🚀 Runtime"
          elif [[ "$COMMAND" == RUN* ]]; then
            LAYER_TYPE="Execution"
            IMPACT="🔧 Configuration"
          else
            LAYER_TYPE="Other"
            IMPACT="❓ Unknown"
          fi
          
          echo "| $LAYER_NUM | $LAYER_TYPE | \`$SHORT_COMMAND\` | $SIZE | $IMPACT |" >> layers-report.md
          ((LAYER_NUM++))
        done
        
        TOTAL_LAYERS=$((LAYER_NUM - 1))
        
        echo "" >> layers-report.md
        echo "### 📊 Build Statistics:" >> layers-report.md
        echo "" >> layers-report.md
        
        echo "**Layer Types:**" >> layers-report.md
        awk -F'|' '/\| [0-9]* \|/ {gsub(/^[ \t]+|[ \t]+$/, "", $3); print $3}' layers-report.md | sort | uniq -c | sort -nr | while read count type; do
          echo "- **$type**: $count layers" >> layers-report.md
        done
        
        echo "" >> layers-report.md
        echo "**Size Analysis:**" >> layers-report.md
        
        BASE_SIZE=$(awk -F'|' '/Base Image/ {gsub(/ /, "", $4); print $4; exit}' layers-report.md)
        PACKAGE_COUNT=$(grep -c "Packages" layers-report.md)
        ZERO_SIZE_COUNT=$(grep -c "| 0B |" layers-report.md)
        TRUNCATED_COUNT=$(grep -c "\.\.\.\`" layers-report.md)
        
        echo "- **Base Layer**: $BASE_SIZE" >> layers-report.md
        echo "- **Package Layers**: $PACKAGE_COUNT" >> layers-report.md
        echo "- **Zero-size Layers**: $ZERO_SIZE_COUNT" >> layers-report.md
        echo "- **Total Layers**: $TOTAL_LAYERS" >> layers-report.md
        
        if [ $TRUNCATED_COUNT -gt 0 ]; then
          echo "" >> layers-report.md
          echo "> 📝 **Note**: $TRUNCATED_COUNT commands are truncated (view full commands in artifacts)" >> layers-report.md
        fi
        
        rm -f /tmp/docker_raw.txt

    - name: Save Docker image as tar archive
      run: |
        docker save custom-alpine:${{ steps.version.outputs.ALPINE_VERSION }} | gzip > alpine-image-${{ steps.version.outputs.ALPINE_VERSION }}.tar.gz

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: alpine-build-${{ steps.version.outputs.ALPINE_VERSION }}
        path: |
          alpine-rootfs.tar.gz
          alpine-image-${{ steps.version.outputs.ALPINE_VERSION }}.tar.gz
          trivy-results.txt
          sbom-spdx.json
          sbom-packages.txt
          sbom-detailed.json
          package-report.md
          layers-report.md
        retention-days: 30

    - name: Create Success Issue
      if: steps.trivy-scan.outcome == 'success'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let report = 'No vulnerabilities found';
          let packageReport = 'No package report available';
          let layersReport = 'No layers report available';
          
          try {
            report = fs.readFileSync('trivy-results.txt', 'utf8');
          } catch (e) {
            report = 'Scan completed successfully - no vulnerabilities found';
          }
          
          try {
            packageReport = fs.readFileSync('package-report.md', 'utf8');
          } catch (e) {
            packageReport = 'Package report generation failed';
          }
          
          try {
            layersReport = fs.readFileSync('layers-report.md', 'utf8');
          } catch (e) {
            layersReport = 'Layers analysis failed';
          }
          
          const issueBody = `# Alpine Build Report ✅

**Version:** ${{ steps.version.outputs.ALPINE_VERSION }}
**Status:** SUCCESS
**Build Date:** ${new Date().toISOString()}
**Total Image Size:** $(docker images custom-alpine:${{ steps.version.outputs.ALPINE_VERSION }} --format "{{.Size}}")

## Security Scan Results
No critical or high vulnerabilities found.

\`\`\`
${report}
\`\`\`

## Image Structure
${layersReport}

## Package Analysis
${packageReport}

## Artifacts
- RootFS Archive: \`alpine-rootfs.tar.gz\`
- Docker Image: \`alpine-image-${{ steps.version.outputs.ALPINE_VERSION }}.tar.gz\`
- Security Report: \`trivy-results.txt\`
- SBOM (SPDX): \`sbom-spdx.json\`
- Package Details: \`sbom-detailed.json\`
- Package Inventory: \`package-report.md\`
- Layer Analysis: \`layers-report.md\`

All artifacts are available in GitHub Actions artifacts.`;

          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `✅ Alpine Build Success - ${{ steps.version.outputs.ALPINE_VERSION }}`,
            body: issueBody,
            labels: ['build-success', 'security-pass']
          });
          
          await github.rest.issues.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issue.data.number,
            state: 'closed'
          });

    - name: Create Failure Issue
      if: steps.trivy-scan.outcome == 'failure'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let report = 'No detailed report available';
          let packageReport = 'No package report available';
          let layersReport = 'No layers report available';
          
          try {
            report = fs.readFileSync('trivy-results.txt', 'utf8');
          } catch (e) {
            report = 'Scan completed with vulnerabilities found';
          }
          
          try {
            packageReport = fs.readFileSync('package-report.md', 'utf8');
          } catch (e) {
            packageReport = 'Package report generation failed';
          }
          
          try {
            layersReport = fs.readFileSync('layers-report.md', 'utf8');
          } catch (e) {
            layersReport = 'Layers analysis failed';
          }
          
          const issueBody = `# Alpine Build Report ❌

          **Version:** ${{ steps.version.outputs.ALPINE_VERSION }}
          **Status:** FAILED - Vulnerabilities found
          **Build Date:** ${new Date().toISOString()}
          **Total Image Size:** $(docker images custom-alpine:${{ steps.version.outputs.ALPINE_VERSION }} --format "{{.Size}}")
          
          ## Security Scan Results
          Critical or High vulnerabilities detected. Manual review required.
          
          \`\`\`
          ${report}
          \`\`\`
          
          ## Image Structure
          ${layersReport}
          
          ## Package Analysis
          ${packageReport}
          
          ## Next Steps
          1. Review the vulnerabilities above
          2. Check artifacts for detailed reports
          3. Consider updating packages or dependencies
          4. Review image layer structure
          
          ## Artifacts
          - RootFS Archive: \`alpine-rootfs.tar.gz\`
          - Docker Image: \`alpine-image-${{ steps.version.outputs.ALPINE_VERSION }}.tar.gz\`
          - Security Report: \`trivy-results.txt\`
          - SBOM (SPDX): \`sbom-spdx.json\`
          - Package Details: \`sbom-detailed.json\`
          - Package Inventory: \`package-report.md\`
          - Layer Analysis: \`layers-report.md\``;

          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `❌ Alpine Build Failed - ${{ steps.version.outputs.ALPINE_VERSION }}`,
            body: issueBody,
            labels: ['build-failed', 'security-issues', 'requires-review']
          });
